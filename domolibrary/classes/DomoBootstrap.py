# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/classes/50_DomoBootstrap.ipynb.

# %% auto 0
__all__ = ['DomoBootstrap_Feature', 'DomoBootstrap']

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 2
from ..routes.bootstrap import InvalidAuthTypeError
from ..client.DomoAuth import DomoAuth, DomoTokenAuth, DomoFullAuth
from ..client.DomoError import DomoError

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 3
import domolibrary.client.DomoEntity as dmee
import domolibrary.client.DomoAuth as dmda
import domolibrary.utils.chunk_execution as ce
import domolibrary.routes.bootstrap as bootstrap_routes
import domolibrary.classes.DomoPage as dmpg

from dataclasses import dataclass, field
from nbdev.showdoc import patch_to
import httpx
from typing import List

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 5
@dataclass
class DomoBootstrap_Feature:
    id: int
    name: str
    label: str
    type: str
    purchased: bool
    enabled: bool

    @classmethod
    def _from_dict(cls, json_obj: dict):  ## expects boostrap API        
        bsf = cls(
            id=json_obj.get("id"),
            name=json_obj.get("name"),
            label=json_obj.get("label"),
            type=json_obj.get("type"),
            purchased=json_obj.get("purchased"),
            enabled=json_obj.get("enabled"),
        )
        return bsf

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 6
@dataclass
class DomoBootstrap(dmee.DomoManager):
    auth: dmda.DomoAuth = field(repr=False)

    customer_id: str = None
    page_ls: list[dmpg.DomoPage] = field(default=None)
    feature_ls: list[DomoBootstrap_Feature] = field(default=None)

    raw: dict = field(default=None)

    async def get(
        self,
        return_raw: bool = False,
        debug_api: bool = False,
        debug_num_stacks_to_drop=2,
        session: httpx.AsyncClient = None,
    ):
        """Get the bootstrap information for the domo_instance."""

        res = await bootstrap_routes.get_bootstrap(
            auth=self.auth,
            debug_api=debug_api,
            debug_num_stacks_to_drop=debug_num_stacks_to_drop,
            parent_class=self.__class__.__name__,
            session=session,
        )

        self.raw = res.response

        if return_raw:
            return res

        return self.raw

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 9
@patch_to(DomoBootstrap)
async def get_customer_id(
    self: DomoBootstrap,
    return_raw: bool = False,
    debug_api: bool = False,
    debug_num_stacks_to_drop=3,
    session : httpx.AsyncClient = None,
):
    res = await bootstrap_routes.get_bootstrap_customerid(
        auth=self.auth,
        debug_api=debug_api,
        debug_num_stacks_to_drop=debug_num_stacks_to_drop,
        return_raw=return_raw,
        parent_class=self.__class__.__name__,
        session = session
    )

    if return_raw:
        return res

    self.customer_id = res.response

    return self.customer_id

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 12
@patch_to(DomoBootstrap)
async def get_pages(
    self: DomoBootstrap,
    return_raw: bool = False,
    debug_api: bool = False,
    debug_num_stacks_to_drop=2,
    session : httpx.AsyncClient = None,
) -> List[dmpg.DomoPage]:
    
    

    res = await bootstrap_routes.get_bootstrap_pages(
        auth=self.auth,
        debug_api=debug_api,
        session = session,
        parent_class=self.__class__.__name__,
        debug_num_stacks_to_drop=debug_num_stacks_to_drop,
    )

    if return_raw:
        return res

    if not res.is_success:
        return None

    self.page_ls = await ce.gather_with_concurrency(
        n=60,
        *[
            dmpg.DomoPage._from_bootstrap(page_obj, auth=self.auth)
            for page_obj in res.response
        ]
    )

    return self.page_ls

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 15
@patch_to(DomoBootstrap)
async def get_features(
    self: DomoBootstrap,
    debug_api: bool = False,
    return_raw: bool = False,
    debug_num_stacks_to_drop=2,
    session: httpx.AsyncClient = None,
):

    res = await bootstrap_routes.get_bootstrap_features(
        auth=self.auth,
        session=session,
        debug_api=debug_api,
        return_raw=return_raw,
        debug_num_stacks_to_drop=debug_num_stacks_to_drop,
        parent_class=self.__class__.__name__,
    )

    if return_raw:
        return res

    feature_list = [
        DomoBootstrap_Feature._from_dict(json_obj)
        for json_obj in res.response
    ]

    return feature_list

# %% ../../nbs/classes/50_DomoBootstrap.ipynb 18
@patch_to(DomoBootstrap)
async def is_feature_accountsv2_enabled(
    self: DomoBootstrap,
    debug_api: bool = False,
    return_raw: bool = False,
    debug_num_stacks_to_drop=3,
    session : httpx.AsyncClient = None,
):
    res = await bootstrap_routes.get_bootstrap_features_is_accountsv2_enabled(
        auth=self.auth,
        session = session,
        return_raw=return_raw,
        debug_api=debug_api,
        debug_num_stacks_to_drop=debug_num_stacks_to_drop,
        parent_class=self.__class__.__name__,
    )

    if return_raw:
        return res

    return res.response
